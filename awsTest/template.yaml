AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM Template for Janken Game API

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for Lambda functions
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: First private subnet for Lambda functions
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Second private subnet for Lambda functions
  LambdaSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for Lambda functions

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    MemorySize: 128
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroupId
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    Environment:
      Variables:
        # 本番環境の場合はParameter Storeから取得
        DB_HOST: !If [IsLocal, "mysql", "{{resolve:ssm:/janken/db/host}}"]
        DB_USER: !If [IsLocal, "lambda_user", "{{resolve:ssm:/janken/db/user}}"]
        DB_PASSWORD: !If [IsLocal, "lambda_password", "{{resolve:ssm:/janken/db/password}}"]
        DB_NAME: !If [IsLocal, "jankendb", "{{resolve:ssm:/janken/db/name}}"]
        REDIS_HOST: !If [IsLocal, "redis", "{{resolve:ssm:/janken/redis/host}}"]
        REDIS_PORT: !If [IsLocal, "6379", "{{resolve:ssm:/janken/redis/port}}"]
        REDIS_PASSWORD: !If [IsLocal, "", "{{resolve:ssm:/janken/redis/password}}"]

Conditions:
  IsLocal: !Equals 
    - !Ref AWS::Region
    - local

Resources:
  JankenApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"

  HandFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: ./lambda/hand
      Handler: index.handler
      Events:
        SubmitHand:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /hand
            Method: POST

  JudgeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: ./lambda/judge
      Handler: index.handler
      Events:
        JudgeMatch:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /judge
            Method: POST

  LoginFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: ./lambda/login
      Handler: index.handler
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /login
            Method: POST

  TestFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: ./lambda/test
      Handler: index.handler
      Events:
        GetUserInfo:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /test/user
            Method: POST
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /users/{userId}
            Method: GET

  UserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: ./lambda/user
      Handler: index.handler
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /api/user
            Method: GET
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /api/user
            Method: PUT
        UploadProfileImage:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /api/user/profile-image
            Method: POST

  UserStatsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: ./lambda/user-stats
      Handler: index.handler
      Events:
        GetUserStats:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /api/user-stats/{userId}
            Method: GET
        UpdateUserStats:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /api/user-stats/{userId}
            Method: PUT

Outputs:
  JankenApi:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${JankenApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  HandFunction:
    Description: Hand Submission Lambda Function ARN
    Value: !GetAtt HandFunction.Arn
  JudgeFunction:
    Description: Judge Match Lambda Function ARN
    Value: !GetAtt JudgeFunction.Arn
  LoginFunction:
    Description: Login Lambda Function ARN
    Value: !GetAtt LoginFunction.Arn
  TestFunction:
    Description: Test Lambda Function ARN
    Value: !GetAtt TestFunction.Arn
  UserFunction:
    Description: User API Lambda Function ARN
    Value: !GetAtt UserFunction.Arn
  UserStatsFunction:
    Description: User Stats API Lambda Function ARN
    Value: !GetAtt UserStatsFunction.Arn 
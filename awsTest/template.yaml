AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM Template for Janken Game API

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for Lambda functions
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: First private subnet for Lambda functions
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Second private subnet for Lambda functions
  LambdaSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for Lambda functions

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    MemorySize: 128
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroupId
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    Environment:
      Variables:
        DB_HOST: "awstest-mysql"
        DB_USER: "lambda_user"
        DB_PASSWORD: "lambda_password"
        DB_NAME: "jankendb"
        REDIS_HOST: "awstest-redis"
        REDIS_PORT: "6379"

Conditions:
  IsLocal: !Equals 
    - !Ref AWS::Region
    - local

Resources:
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan
      Description: Usage plan for Janken Game API
      Quota:
        Limit: 1000000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 50

  DevApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}-dev-key
      Description: Development environment API key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref JankenApi
          StageName: dev

  StagingApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}-staging-key
      Description: Staging environment API key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref JankenApi
          StageName: stg

  ProdApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}-prod-key
      Description: Production environment API key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref JankenApi
          StageName: prod

  JankenApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: true
      UsagePlanId: !Ref ApiUsagePlan

  HandFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: .
      Handler: lambda/hand/index.handler
      Events:
        SubmitHand:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /hand
            Method: POST

  JudgeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: .
      Handler: lambda/judge/index.handler
      Events:
        JudgeMatch:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /judge
            Method: POST

  LoginFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: .
      Handler: lambda/login/index.handler
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /login
            Method: POST

  UserStatsDisplayFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: .
      Handler: lambda/lobby/user-stats/display/index.handler
      Events:
        UpdateDisplaySettings:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /api/lobby/user-stats/{userId}/display
            Method: PUT

  RegisterFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: .
      Handler: lambda/register/index.handler
      Events:
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /register
            Method: POST

  StudentIdImageFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: .
      Handler: lambda/settings/user-profile/student-id-image/index.handler
      Events:
        UploadStudentIdImage:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /api/settings/user-profile/{userId}/student-id-image
            Method: POST

  TitleAliasSettingsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: .
      Handler: lambda/settings/user-profile/title-alias/index.handler
      Events:
        UpdateTitleAlias:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /api/settings/user-profile/{userId}/title-alias
            Method: PUT

  ImageDeleteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: nodejs20.x-v1
    Properties:
      CodeUri: .
      Handler: lambda/settings/user-profile/image/delete/index.handler
      Events:
        DeleteImage:
          Type: Api
          Properties:
            RestApiId: !Ref JankenApi
            Path: /api/settings/user-profile/{userId}/image
            Method: DELETE

Outputs:
  JankenApi:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${JankenApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  DevApiKey:
    Description: Development API Key
    Value: !Ref DevApiKey
  StagingApiKey:
    Description: Staging API Key
    Value: !Ref StagingApiKey
  ProdApiKey:
    Description: Production API Key
    Value: !Ref ProdApiKey
  HandFunction:
    Description: Hand Submission Lambda Function ARN
    Value: !GetAtt HandFunction.Arn
  JudgeFunction:
    Description: Judge Match Lambda Function ARN
    Value: !GetAtt JudgeFunction.Arn
  LoginFunction:
    Description: Login Lambda Function ARN
    Value: !GetAtt LoginFunction.Arn
  UserStatsDisplayFunction:
    Description: User Stats Display API Lambda Function ARN
    Value: !GetAtt UserStatsDisplayFunction.Arn
  RegisterFunction:
    Description: Register API Lambda Function ARN
    Value: !GetAtt RegisterFunction.Arn
  StudentIdImageFunction:
    Description: Student ID Image Upload Lambda Function ARN
    Value: !GetAtt StudentIdImageFunction.Arn
  TitleAliasSettingsFunction:
    Description: Title Alias Settings Lambda Function ARN
    Value: !GetAtt TitleAliasSettingsFunction.Arn
  ImageDeleteFunction:
    Description: Image Delete Lambda Function ARN
    Value: !GetAtt ImageDeleteFunction.Arn
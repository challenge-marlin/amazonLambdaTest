version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: awstest-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - lambda-local
    networks:
      - app-network
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: awstest-mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: jankendb
      MYSQL_USER: lambda_user
      MYSQL_PASSWORD: lambda_password
    ports:
      - "127.0.0.1:3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ../doc/sql/create_tables.sql:/docker-entrypoint-initdb.d/01-create-tables.sql
      - ../doc/sql:/sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2
    container_name: awstest-redis
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  lambda-local:
    build:
      context: .
      dockerfile: Dockerfile.vps
    container_name: awstest-lambda
    volumes:
      - .:/var/task
      - /var/task/node_modules
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - REDIS_HOST=awstest-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - DB_HOST=awstest-mysql
      - DB_USER=lambda_user
      - DB_PASSWORD=lambda_password
      - DB_NAME=jankendb
      - AWS_SAM_LOCAL=true
      - SAM_CLI_TELEMETRY=0
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: ["sam", "local", "start-api", "--host", "0.0.0.0", "--port", "3000", "--docker-network", "awstest-network"]

networks:
  app-network:
    name: awstest-network

volumes:
  mysql_data:
  redis_data: 